//SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

// ===============================================
// Revert Contract - revert() 함수 사용 예제
// ===============================================
// 
// 📌 revert() 개념:
//   - 명시적으로 트랜잭션을 실패시키고 롤백하는 함수
//   - 커스텀 에러 메시지를 제공할 수 있음
//   - 사용된 가스는 환불되지만, 트랜잭션 수수료는 소모됨
//   - 조건부 실행 실패를 명확하게 표현 가능
//   - require()의 기본 동작과 유사하지만 더 명시적
//
// 💡 사용 케이스:
//   - 복잡한 조건 검사 후 실패 처리
//   - 명확한 에러 메시지가 필요한 경우
//   - 조건부 로직에서 명시적 실패 표현
// ===============================================

contract Revert{
    // 주문 목록: 주소별 송금액을 저장하는 매핑
    mapping(address => uint256) public orderList;
    
    // 최소 주문 금액 (1 이더)
    uint256 public min = 1 ether; // 최소값 설정
    
    /**
     * @dev 주문 함수 - revert()를 사용한 조건부 실패 처리
     * @notice 최소 금액 이상의 이더를 보내야 주문이 성공됩니다
     * 
     * revert() 사용 이유:
     * - 최소 금액 미달 시 명확한 에러 메시지 제공
     * - 사용자에게 실패 원인을 알려줌
     * - 조건부 로직에서 명시적 실패 처리
     */
    function order() external payable{
        // 조건 검사: 송금액이 최소값보다 작은 경우
        if(msg.value < min){
            // revert: 명시적 실패 + 커스텀 에러 메시지
            // 실패 시: 트랜잭션 롤백, 가스 환불, 에러 메시지 제공
            revert("Msg. value must not be zero");
        }
        
        // 조건을 통과하면 주문 목록에 발신자와 송금액 저장
        orderList[msg.sender] = msg.value;
    }
}
 